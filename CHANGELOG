v0.2-alpha
==========

themen dieses releases
----------------------

api kapselung
---------------
die gesamte implementierung ist nun in eigenem namespace `templ` und verunreinigt somit nicht den globalen sichtbarkeitsbereich. der benutzer kann durch die angabe von `using namespace templ::api` vordefinierte symbole in seinen gültigkeitsbereich ziehen und die templ api frei nutzen.

```c++
#include "templ.cpp"

int main() {
    using namespace templ::api;

    templ_init(MB(100), MB(100), MB(100));

    Templ_Vars vars = templ_vars();
    Templ_Var *name = templ_var("name", var_str("heinrich"));
    templ_vars_add(&vars, name);

    Parsed_Templ *templ = templ_compile_string("servus {{ name }}");
    char *result = templ_render(templ, vars);

    if ( status_is_not_error() ) {
        os_file_write("name.html", result, os_strlen(result));
    } else {
        fprintf(stderr, "fehler aufgetreten in der übergebenen zeichenkette: %s\n", status_message());
        status_reset();
    }
}
```
fehlerbehandlung
-------------------
eine tolerante fehlerbehandlung wurde in dieser version eingebaut. es kann der gesamte prozess der verarbeitung eines templates durchlaufen werden, ohne unvorhergesehene ergebnisse. zu jedem zeitpunkt kann auf fehlerstatus abgeprüft werden. es ist also nicht notwendig jeden aufruf der api in ein `if` verpackt werden um fehler abzufangen.

indizierung
-----------
unterstützung für indizierung von variablen wurde eingebaut.

```jinja
{% set ausgabe = "hallo, guten tag" %}
{{ ausgabe[3] }}
```

codehygiene
--------------
mit hilfe der [Codacy](http://www.codacy.com) analyse wurde die codebasis bereinigt.

formatierung
------------
die wiedergabe der leerzeichen wurde verbessert.

tests
-----
die meisten tests, die in der [jinja2 spezifikation](https://jinja.palletsprojects.com/en/2.10.x/templates/#list-of-builtin-tests) beschrieben sind, wurden in dieser version bereits umgesetzt.

im issue #[4](https://github.com/NoobSaibot/templ/issues/4) ist eine übersicht der bereits umgesetzten tests und derer, die noch nicht umgesetzt sind.

mehrfachrückgabe
----------------
in dieser version werden mehrfachrückgabewerte in for-schleifen und in set-anweisungen unterstützt. die aktuelle einschränkung besteht darin, dass nur namen auf der linken seite des `=` angegeben werden dürfen.

folgendes also würde funktionieren

```jinja
{% for a, b = [1, 2] %}
...
{% endfor %}

{% set name, vorname = ["mustermann", "max"] %}
```

folgendes wird noch nicht unterstützt

```jinja
{% set namen[0], vorname[0] = ["mustermann", "max"] %}
```

v0.1-alpha
==========

